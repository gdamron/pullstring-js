{"version":3,"sources":["webpack:///pullstring.min.js","webpack:///webpack/bootstrap a10a0aeac75a8bfe10eb","webpack:///./src/Pullstring.js","webpack:///./src/Conversation.js","webpack:///./src/Response.js","webpack:///./src/RestClient.js","webpack:///./src/Request.js","webpack:///./src/Speech.js","webpack:///./src/SpeechWorker.js","webpack:///./src/VersionInfo.js"],"names":["pullstring","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_Conversation","_Response","_Request","_VersionInfo","Conversation","Response","Status","DialogOutput","BehaviorOutput","Label","Counter","Flag","List","Phoneme","Request","VersionInfo","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_RestClient","_Speech","nodeXhr","arguments","undefined","this","onResponse","config","baseUrl","ApiBaseUrl","xhr","_client","RestClient","_speech","Speech","_request","value","projectName","request","_ensureRequest","json","project","hasOwnProperty","time_zone_offset","timeZoneOffset","_post","text","activity","event","parameters","eventObj","name","start","buffer","add","_this","getBytes","data","flush","_postAudio","audio","format","toString","_returnError","EAudioFormat","Wav16k","audioData","_getWavData","error","responseId","goto","entities","Array","isArray","get_entities","entObj","entity","set_entities","conversationId","participantId","apiKey","body","_this2","contentType","doEncode","endpoint","_endpointForRequest","headers","_headersForRequest","params","_paramsForRequest","_bodyForRequest","post","response","_responseHandler","Authorization","Accept","asr_language","language","locale","acountId","account","accountId","buildType","EBuildType","Production","build_type","restartIfModified","restart_if_modified","participant","status","success","dataView","riff","_dataViewGetString","channels","getUint16","rate","getUint32","bitsPerSample","dataOffset","chunkSize","fileSize","dataStart","slice","Uint8Array","offset","retVal","charCode","getUint8","String","fromCharCode","message","code","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_typeof","Symbol","iterator","obj","EOutputType","DialogResponse","BehaviorResponse","EEntityType","secondsSinceStart","seconds_since_start","Entity","_Entity","getPrototypeOf","type","_Entity2","_Entity3","_this3","_Entity4","_this4","Output","guid","_Output","_this5","uri","videoFile","video_file","duration","character","userData","user_data","phonemes","index","phoneme","push","_Output2","_this6","behavior","outputs","output","dialog","flag","counter","label","list","lastModified","last_modified","Date","conversation","etag","timedResponseInterval","timed_response_interval","asrHypothesis","asr_hypothesis","timed_response_interruptable","timedResponseInterruptible","Boolean","options","decode","JSON","parse","encode","stringify","XMLHttpRequest","callback","url","_url","_sendRequest","endsWith","query","encodeURIComponent","val","param","join","method","open","h","setRequestHeader","onreadystatechange","readyState","responseText","send","Sandbox","Staging","RawPcm16k","global","_interopRequireDefault","__esModule","default","_SpeechWorker","_SpeechWorker2","_callback","_worker","Worker","_getSpeechWorkerUrl","onmessage","workerObj","command","postMessage","cb","Error","createObjURL","window","URL","createObjectURL","bind","webkitURL","funcStr","bodyStart","indexOf","bodyEnd","lastIndexOf","speechWorkerFunc","substring","Blob","SpeechWorker","listen","recBuffers","recLength","concatenate","buffers","len","merged","Float32Array","set","getMono","monoBuffer","bufferLength","arrayBuffer","ArrayBuffer","DataView","byteOffset","inSample","sample","Math","max","min","intSample","setUint16","messages","EFeatures","StreamingAsr","feature"],"mappings":"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","file":"pullstring.min.js","sourcesContent":["var pullstring =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _Conversation = __webpack_require__(1);\n\t\n\tvar _Response = __webpack_require__(2);\n\t\n\tvar _Request = __webpack_require__(4);\n\t\n\tvar _VersionInfo = __webpack_require__(7);\n\t\n\t/**\n\t * Main PullString SDK module.\n\t * @module pullstring\n\t * @property {Conversation} Conversation\n\t * @property {Response} Response\n\t * @property {Status} Status\n\t * @property {DialogOutput} DialogOutput\n\t * @property {BehaviorOutput} BehaviorOutput\n\t * @property {Label} Label\n\t * @property {Counter} Counter\n\t * @property {Flag} Flag\n\t * @property {List} List\n\t * @property {Phoneme} Phoneme\n\t * @property {Request} Request\n\t * @property {VersionInfo} VersionInfo\n\t */\n\t\n\t/*\n\t * The PullString Javascript SDK\n\t *\n\t * Copyright (c) 2016 PullString, Inc.\n\t *\n\t * The following source code is licensed under the MIT license.\n\t * See the LICENSE file, or https://opensource.org/licenses/MIT.\n\t */\n\tmodule.exports = {\n\t  Conversation: _Conversation.Conversation,\n\t  Response: _Response.Response,\n\t  Status: _Response.Status,\n\t  DialogOutput: _Response.DialogOutput,\n\t  BehaviorOutput: _Response.BehaviorOutput,\n\t  Label: _Response.Label,\n\t  Counter: _Response.Counter,\n\t  Flag: _Response.Flag,\n\t  List: _Response.List,\n\t  Phoneme: _Response.Phoneme,\n\t  Request: _Request.Request,\n\t  VersionInfo: _VersionInfo.VersionInfo\n\t};\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Encapsulate a conversation thread for PullString's Web API.\n\tn\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright (c) 2016 PullString, Inc.\n\tn\the following source code is licensed under the MIT license.\n\tee the LICENSE file, or https://opensource.org/licenses/MIT.\n\tn\t\n\tvar _Response = __webpack_require__(2);\n\t\n\tvar _RestClient = __webpack_require__(3);\n\t\n\tvar _Request = __webpack_require__(4);\n\t\n\tvar _Speech = __webpack_require__(5);\n\t\n\tvar _VersionInfo = __webpack_require__(7);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * The Conversation class can be used to interface with the PullString API.\n\t *\n\t * To begin a conversation, call the start() method, providing a PullString\n\t * project ID and a Request object specifying you API key.\n\t *\n\t * The Web API returns a Response object that can contain zero or more outputs,\n\t * such as lines of dialog or behaviors. This Response object is passed to the\n\t * onResponse callback as its sole parameter.\n\t *\n\t * @property {string} ApiBaseUrl\n\t * @property {Number} AsrSampleRate\n\t * @property {Number} AsrChannels\n\t */\n\tvar Conversation = function () {\n\t    /**\n\t     * Creates a Conversation\n\t     * @param {XMLHttpReqeuest} [nodeXhr = null] If in Node.js, pass in the\n\t     * XMLHttpReqeuest module class.\n\t     */\n\t    function Conversation() {\n\t        var nodeXhr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\t\n\t        _classCallCheck(this, Conversation);\n\t\n\t        /**\n\t         * @callback Conversation~onResponse\n\t         */\n\t        this.onResponse = null;\n\t        var config = { baseUrl: _VersionInfo.VersionInfo.ApiBaseUrl };\n\t        if (nodeXhr) config.xhr = nodeXhr;\n\t        this._client = new _RestClient.RestClient(config);\n\t        this._speech = new _Speech.Speech();\n\t        this._request = null;\n\t    }\n\t\n\t    /**\n\t     * Start a new conversation with the Web API and receive a reponse via the\n\t     * onResponse callback.\n\t     * @param {string} projectName The PullString project ID.\n\t     * @param {Request} request A Request object with a valid apiKey value\n\t     * specified.\n\t     * @param {string} request.apiKey Your API key.\n\t     */\n\t\n\t\n\t    _createClass(Conversation, [{\n\t        key: 'start',\n\t        value: function start(projectName, request) {\n\t            if (!this._ensureRequest(request)) return;\n\t\n\t            var json = {\n\t                project: projectName\n\t            };\n\t\n\t            if (request.hasOwnProperty('timeZoneOffset')) {\n\t                json.time_zone_offset = request.timeZoneOffset; // eslint-disable-line camelcase\n\t            }\n\t\n\t            this._post(json, request);\n\t        }\n\t\n\t        /**\n\t         * Send user input text to the Web API and receive a response via the\n\t         * onResponse callback.\n\t         * @param {string} text User input text.\n\t         * @param {Request} request A request object with at least apiKey and\n\t         * conversationId set.\n\t         * @param {string} request.apiKey Your API key.\n\t         * @param {string} request.conversationId The conversation ID received when\n\t         * the conversation was started.\n\t         */\n\t\n\t    }, {\n\t        key: 'sendText',\n\t        value: function sendText(text, request) {\n\t            var json = {\n\t                text: text\n\t            };\n\t\n\t            this._post(json, request);\n\t        }\n\t\n\t        /**\n\t         * Send an activity name or ID to the Web API and receive a response via\n\t         * the onResponse callback.\n\t         * @param {string} activity The activity name or ID.\n\t         * @param {Request} request A request object with at least apiKey and\n\t         * conversationId set.\n\t         */\n\t\n\t    }, {\n\t        key: 'sendActivity',\n\t        value: function sendActivity(activity, request) {\n\t            var json = {\n\t                activity: activity\n\t            };\n\t\n\t            this._post(json, request);\n\t        }\n\t\n\t        /**\n\t         * Send an event to the Web API and receive a response via the onResponse\n\t         * callback.\n\t         * @param {string} event The event name.\n\t         * @param {Object} parameters Any accompanying parameters.\n\t         * @param {Request} request A request object with at least apiKey and\n\t         * conversationId set.\n\t         */\n\t\n\t    }, {\n\t        key: 'sendEvent',\n\t        value: function sendEvent(event, parameters, request) {\n\t            var eventObj = {\n\t                name: event,\n\t                parameters: parameters || {}\n\t            };\n\t\n\t            var json = {\n\t                event: eventObj\n\t            };\n\t\n\t            this._post(json, request);\n\t        }\n\t\n\t        /**\n\t         * Initiate a progressive (chunked) streaming of audio data, where supported.\n\t         *\n\t         * Note, chunked streaming is not currently implemented, so this will batch\n\t         * up all audio and send it all at once when end_audio() is called.\n\t         * @param {Request} request A request object with at least apiKey and\n\t         * conversationId set.\n\t         */\n\t\n\t    }, {\n\t        key: 'startAudio',\n\t        value: function startAudio(request) {\n\t            if (this._ensureRequest(request)) this._speech.start();\n\t        }\n\t\n\t        /**\n\t         * Add a chunk of audio. You must call start_audio() first. The format of\n\t         * the audio must be mono LinearPCM audio data at a sample rate of 16000\n\t         * samples per second.\n\t         * @param {Float32Array} buffer The audio data, i.e. from\n\t         * `audioBuffer.getChannelData(0)`.\n\t         */\n\t\n\t    }, {\n\t        key: 'addAudio',\n\t        value: function addAudio(buffer) {\n\t            this._speech.add(buffer);\n\t        }\n\t\n\t        /**\n\t         * Signal that all audio has been provided via add_audio() calls. This will\n\t         * complete the audio request and return the Web API response.\n\t         */\n\t\n\t    }, {\n\t        key: 'stopAudio',\n\t        value: function stopAudio() {\n\t            var _this = this;\n\t            this._speech.getBytes(function (data) {\n\t                _this._speech.flush();\n\t                _this._postAudio(data, _this._request);\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Send an entire audio sample of the user speaking to the Web API. Audio\n\t         * must be raw, mono 16-bit linear PCM at a sample rate of 16000\n\t         * samples per second.\n\t         * @param {DataView} audio Mono 16-bit linear PCM audio data at 16k Hz.\n\t         * @param {Request.EAudioFormat} format Specify WAV or raw PCM format. Note\n\t         * that only 16-bit linear PCM WAV format at 16k is currently supported.\n\t         * @param {Request} request A request object with at least apiKey and\n\t         * conversationId set.\n\t         * */\n\t\n\t    }, {\n\t        key: 'sendAudio',\n\t        value: function sendAudio(audio, format, request) {\n\t            if (Object.prototype.toString.call(audio) !== '[object DataView]') {\n\t                this._returnError('Audio sent to sendAudio is not a DataView');\n\t                return;\n\t            }\n\t\n\t            if (format !== _Request.Request.EAudioFormat.Wav16k) {\n\t                this._returnError('Unsupported format sent to sendAudio.');\n\t                return;\n\t            }\n\t\n\t            var audioData = this._getWavData(audio);\n\t\n\t            if (audioData.error) {\n\t                this._returnError(audioData.error);\n\t                return;\n\t            }\n\t\n\t            this._postAudio(audioData, request);\n\t        }\n\t\n\t        /**\n\t         * Jump the conversation directly to a response.\n\t         * @param {string} responseId The UUID of the response to jump to.\n\t         * @param {Request} request A request object with at least apiKey and\n\t         * conversationId set.\n\t         */\n\t\n\t    }, {\n\t        key: 'goTo',\n\t        value: function goTo(responseId, request) {\n\t            var json = {\n\t                goto: responseId\n\t            };\n\t\n\t            this._post(json, request);\n\t        }\n\t\n\t        /**\n\t         * Call the Web API to see if there is a time-based response to process. You\n\t         * only need to call this if the previous response returned a value for the\n\t         * timedResponseInterval >= 0.  In this case, set a timer for that value (in\n\t         * seconds) and then call this method. If there is no time-based response,\n\t         * the onResponse callback will be passed an empty Response object.\n\t         * @param {Request} request A request object with at least apiKey and\n\t         * conversationId set.\n\t         */\n\t\n\t    }, {\n\t        key: 'checkForTimedResponse',\n\t        value: function checkForTimedResponse(request) {\n\t            var json = {/* empty json */};\n\t            this._post(json, request);\n\t        }\n\t\n\t        /**\n\t         * Request the values of the specified entities (i.e.: labels, counters, flags,\n\t         * and lists) from the Web API.\n\t         * @param {string[]} entities An array of entity names.\n\t         * @param {Request} request A request object with at least apiKey and\n\t         * conversationId set.\n\t         */\n\t\n\t    }, {\n\t        key: 'getEntities',\n\t        value: function getEntities(entities, request) {\n\t            if (!Array.isArray(entities)) {\n\t                this._returnError('entities sent to getEntities must be an array');\n\t                return;\n\t            }\n\t\n\t            var json = {\n\t                get_entities: entities };\n\t\n\t            this._post(json, request);\n\t        }\n\t\n\t        /**\n\t         * Change the value of the specified entities (i.e.: labels, counters, flags,\n\t         * and lists) via the Web API.\n\t         * @param {Object[]} entities An array specifying the entities to set and\n\t         * their new values.\n\t         * @param {string} entities[].name The entity's name.\n\t         * @param {*} entities[].value The entity's name, which can be any type.\n\t         * @param {Request} request A request object with at least apiKey and\n\t         * conversationId set.\n\t         */\n\t\n\t    }, {\n\t        key: 'setEntities',\n\t        value: function setEntities(entities, request) {\n\t            if (!Array.isArray(entities)) {\n\t                this._returnError('entities sent to setEntities must be an array');\n\t                return;\n\t            }\n\t\n\t            var entObj = {};\n\t            for (var i in entities) {\n\t                var entity = entities[i];\n\t                entObj[entity.name] = entity.value;\n\t            }\n\t\n\t            var json = {\n\t                set_entities: entObj };\n\t\n\t            this._post(json, request);\n\t        }\n\t\n\t        /**\n\t         * Retrieve the current conversation ID. Conversation IDs can persist across\n\t         * sessions, if desired.\n\t         * @return {string} The concurrent conversation ID.\n\t         */\n\t\n\t    }, {\n\t        key: 'getConversationId',\n\t        value: function getConversationId() {\n\t            if (this._request && this._request.conversationId) {\n\t                return this._request.conversationId;\n\t            }\n\t\n\t            return null;\n\t        }\n\t\n\t        /**\n\t         * Get the current participant ID, which identifies the current state for\n\t         * clients. This can persist across sessions, if desired.\n\t         * @return {string} The current participant ID.\n\t         */\n\t\n\t    }, {\n\t        key: 'getParticipantId',\n\t        value: function getParticipantId() {\n\t            if (this._request && this._request.participantId) {\n\t                return this._request.participantId;\n\t            }\n\t\n\t            return null;\n\t        }\n\t    }, {\n\t        key: '_ensureRequest',\n\t        value: function _ensureRequest(request) {\n\t            if (request) {\n\t                this._request = request;\n\t            }\n\t\n\t            if (!this._request || !this._request.apiKey) {\n\t                this._returnError('Valid request object missing');\n\t                return false;\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: '_post',\n\t        value: function _post(body, request) {\n\t            var _this2 = this;\n\t\n\t            var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'application/json';\n\t            var doEncode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\t\n\t            if (!this._ensureRequest(request)) return;\n\t            var endpoint = this._endpointForRequest(this._request);\n\t            var headers = this._headersForRequest(this._request, contentType);\n\t            var params = this._paramsForRequest(this._request);\n\t\n\t            // If doEncode is true, our body is json. So add more params from request.\n\t            if (doEncode) {\n\t                body = this._bodyForRequest(this._request, body);\n\t            }\n\t\n\t            this._client.post(endpoint, params, headers, body, function (response) {\n\t                return _this2._responseHandler(response);\n\t            }, doEncode);\n\t        }\n\t    }, {\n\t        key: '_postAudio',\n\t        value: function _postAudio(audio, request) {\n\t            if (!audio) {\n\t                this._returnError('Unable to extract audio data');\n\t                return;\n\t            }\n\t\n\t            this._post(audio, this._request, 'audio/l16; rate=16000', false);\n\t        }\n\t    }, {\n\t        key: '_headersForRequest',\n\t        value: function _headersForRequest(request, contentType) {\n\t            var headers = {\n\t                Authorization: 'Bearer ' + request.apiKey,\n\t                Accept: 'application/json'\n\t            };\n\t\n\t            headers['Content-Type'] = contentType;\n\t\n\t            return headers;\n\t        }\n\t    }, {\n\t        key: '_paramsForRequest',\n\t        value: function _paramsForRequest(request) {\n\t            var params = {\n\t                asr_language: request.language };\n\t\n\t            if (request.locale) params.locale = request.locale;\n\t            if (request.acountId) params.account = request.accountId;\n\t\n\t            return params;\n\t        }\n\t    }, {\n\t        key: '_bodyForRequest',\n\t        value: function _bodyForRequest(request) {\n\t            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\t\n\t            var body = {};\n\t\n\t            // only add build_type and restart_if_modified if not the default values\n\t            if (request.buildType !== _Request.Request.EBuildType.Production) {\n\t                body.build_type = request.buildType; // eslint-disable-line camelcase\n\t            }\n\t\n\t            if (request.restartIfModified === false) {\n\t                body.restart_if_modified = false; // eslint-disable-line camelcase\n\t            }\n\t\n\t            if (request.participantId) body.participant = request.participantId;\n\t\n\t            if (params) {\n\t                for (var p in params) {\n\t                    body[p] = params[p];\n\t                }\n\t            }\n\t\n\t            return body;\n\t        }\n\t    }, {\n\t        key: '_endpointForRequest',\n\t        value: function _endpointForRequest(request) {\n\t            var endpoint = 'conversation';\n\t\n\t            if (request.conversationId) {\n\t                endpoint = endpoint + '/' + request.conversationId;\n\t            }\n\t\n\t            return endpoint;\n\t        }\n\t    }, {\n\t        key: '_responseHandler',\n\t        value: function _responseHandler(json) {\n\t            var response = new _Response.Response(json);\n\t            if (response.status.success && this._request) {\n\t                this._request.conversationId = response.conversationId;\n\t                this._request.participantId = response.participantId;\n\t            }\n\t            this.onResponse && this.onResponse(response);\n\t        }\n\t    }, {\n\t        key: '_getWavData',\n\t        value: function _getWavData(dataView) {\n\t            var riff = this._dataViewGetString(dataView, 0, 4);\n\t\n\t            if (riff !== 'RIFF') {\n\t                return { error: 'Data is not a WAV file' };\n\t            }\n\t\n\t            var channels = dataView.getUint16(22, true);\n\t            var rate = dataView.getUint32(24, true);\n\t            var bitsPerSample = dataView.getUint16(34, true);\n\t\n\t            if (channels !== 1 || rate !== 16000 || bitsPerSample !== 16) {\n\t                return { error: 'WAV data is not mono 16-bit data at 16k sample rate' };\n\t            }\n\t\n\t            var dataOffset = 12;\n\t            var chunkSize = dataView.getUint32(16, true);\n\t            var fileSize = dataView.getUint32(4, true);\n\t\n\t            while (this._dataViewGetString(dataView, dataOffset, 4) !== 'data') {\n\t                if (dataOffset > fileSize) {\n\t                    return { error: 'Cannot find data segment in WAV file' };\n\t                }\n\t\n\t                dataOffset += chunkSize + 8;\n\t                chunkSize = dataView.getUint32(dataOffset + 4, true);\n\t            }\n\t\n\t            var dataStart = dataOffset + 8;\n\t            var buffer = dataView.buffer.slice(dataStart);\n\t            return new Uint8Array(buffer);\n\t        }\n\t    }, {\n\t        key: '_dataViewGetString',\n\t        value: function _dataViewGetString(dataView, offset, length) {\n\t            var retVal = '';\n\t            for (var i = 0; i < length; i++) {\n\t                var charCode = dataView.getUint8(i + offset);\n\t                retVal = retVal + String.fromCharCode(charCode);\n\t            }\n\t\n\t            return retVal;\n\t        }\n\t    }, {\n\t        key: '_returnError',\n\t        value: function _returnError(message) {\n\t            var error = new _Response.Status({\n\t                success: false,\n\t                message: message,\n\t                code: 500\n\t            });\n\t\n\t            this.onResponse && this.onResponse({\n\t                status: error\n\t            });\n\t        }\n\t    }]);\n\t\n\t    return Conversation;\n\t}();\n\t\n\t// static constants\n\t\n\t\n\tObject.defineProperty(Conversation, 'AsrSampleRate', {\n\t    value: 16000,\n\t    writable: false,\n\t    enumerable: true,\n\t    configurable: false\n\t});\n\t\n\tObject.defineProperty(Conversation, 'AsrChannels', {\n\t    value: 1,\n\t    writable: false,\n\t    enumerable: true,\n\t    configurable: false\n\t});\n\t\n\tmodule.exports = { Conversation: Conversation };\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*\n\t * Encapsulate a response from the PullString Web API.\n\t *\n\t * Copyright (c) 2016 PullString, Inc.\n\t *\n\t * The following source code is licensed under the MIT license.\n\t * See the LICENSE file, or https://opensource.org/licenses/MIT.\n\t */\n\t\n\t/**\n\t * Define the set of outputs that can be returned in a response.\n\t * @readonly\n\t * @property {string} EOutputType.DialogResponse\n\t * @property {string} EOutputType.BehaviorResponse\n\t */\n\tvar EOutputType = {\n\t    DialogResponse: 'dialog',\n\t    BehaviorResponse: 'behavior'\n\t};\n\t\n\t/**\n\t * Define the list of entity types\n\t * @readonly\n\t * @property {string} EEntityType.Label\n\t * @property {string} EEntityType.Counter\n\t * @property {string} EEntityType.Flag\n\t * @property {string} EEntityType.List\n\t */\n\tvar EEntityType = {\n\t    Label: 'label',\n\t    Counter: 'counter',\n\t    Flag: 'flag',\n\t    List: 'list'\n\t};\n\t\n\t/**\n\t * Describe a single phoneme for an audio response, e.g., to drive automatic\n\t * lip sync.\n\t * @property {string} name\n\t * @property {number} secondsSinceStart\n\t */\n\t\n\tvar Phoneme = function Phoneme(config) {\n\t    _classCallCheck(this, Phoneme);\n\t\n\t    this.name = config.name ? String(config.name) : null;\n\t    this.secondsSinceStart = +config.seconds_since_start;\n\t};\n\t\n\t/**\n\t * Base class to describe a single entity, such as a label, counter, flag, or list\n\t * @property {string} name\n\t */\n\t\n\t\n\tvar Entity = function Entity(name) {\n\t    _classCallCheck(this, Entity);\n\t\n\t    this.name = name ? String(name) : null;\n\t};\n\t\n\t/**\n\t * Subclass of Entity to describe a single Label\n\t * @extends Entity\n\t * @property {EEntityType} type EEntityType.Label (read only)\n\t * @property {string} value\n\t */\n\t\n\t\n\tvar Label = function (_Entity) {\n\t    _inherits(Label, _Entity);\n\t\n\t    function Label(name, value) {\n\t        _classCallCheck(this, Label);\n\t\n\t        var _this = _possibleConstructorReturn(this, (Label.__proto__ || Object.getPrototypeOf(Label)).call(this, name));\n\t\n\t        _this.type = EEntityType.Label;\n\t        _this.value = value ? String(value) : null;\n\t        return _this;\n\t    }\n\t\n\t    return Label;\n\t}(Entity);\n\t\n\t/**\n\t * Subclass of Entity to describe a single Counter\n\t * @extends Entity\n\t * @property {EEntityType} type EEntityType.Counter (read only)\n\t * @property {number} value\n\t */\n\t\n\t\n\tvar Counter = function (_Entity2) {\n\t    _inherits(Counter, _Entity2);\n\t\n\t    function Counter(name, value) {\n\t        _classCallCheck(this, Counter);\n\t\n\t        var _this2 = _possibleConstructorReturn(this, (Counter.__proto__ || Object.getPrototypeOf(Counter)).call(this, name));\n\t\n\t        _this2.type = EEntityType.Counter;\n\t        _this2.value = +value;\n\t        return _this2;\n\t    }\n\t\n\t    return Counter;\n\t}(Entity);\n\t\n\t/**\n\t * Subclass of Entity to describe a single Flag\n\t * @extends Entity\n\t * @property {EEntityType} type EEntityType.Flag (read only)\n\t * @property {boolean} value\n\t */\n\t\n\t\n\tvar Flag = function (_Entity3) {\n\t    _inherits(Flag, _Entity3);\n\t\n\t    function Flag(name, value) {\n\t        _classCallCheck(this, Flag);\n\t\n\t        var _this3 = _possibleConstructorReturn(this, (Flag.__proto__ || Object.getPrototypeOf(Flag)).call(this, name));\n\t\n\t        _this3.type = EEntityType.Flag;\n\t        _this3.value = !!value;\n\t        return _this3;\n\t    }\n\t\n\t    return Flag;\n\t}(Entity);\n\t\n\t/**\n\t * Subclass of Entity to describe a single List\n\t * @extends Entity\n\t * @property {EEntityType} type EEntityType.List (read only)\n\t * @property {Array} value\n\t */\n\t\n\t\n\tvar List = function (_Entity4) {\n\t    _inherits(List, _Entity4);\n\t\n\t    function List(name, value) {\n\t        _classCallCheck(this, List);\n\t\n\t        var _this4 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, name));\n\t\n\t        _this4.type = EEntityType.List;\n\t        _this4.value = Array.isArray(value) ? value.slice() : [];\n\t        return _this4;\n\t    }\n\t\n\t    return List;\n\t}(Entity);\n\t\n\t/**\n\t * Base class for outputs that are of type dialog or behavior\n\t * @property {string} guid\n\t */\n\t\n\t\n\tvar Output = function Output(guid) {\n\t    _classCallCheck(this, Output);\n\t\n\t    this.guid = String(guid);\n\t};\n\t\n\t/**\n\t * Subclass of Output that represents a dialog response\n\t * @extends Output\n\t * @property {EOutputType} type EOutputType.DialogResponse (read only)\n\t * @property {string} text A character's text response.\n\t * @property {string} uri Location of recorded audio, if available.\n\t * @property {string} videoFile Location of recorded video, if available.\n\t * @property {number} duration Duration of spoken line in seconds.\n\t * @property {string} character The speaking character.\n\t * @property {string} userData Optional arbitrary string data that was associated\n\t * with the dialog line within PullString Author. This can be used to pass custom\n\t * per-line information, such as an animation clip to play.\n\t * @property {Phoneme[]} phonemes Array of phonemes for driving automatic lip sync.\n\t */\n\t\n\t\n\tvar DialogOutput = function (_Output) {\n\t    _inherits(DialogOutput, _Output);\n\t\n\t    function DialogOutput(config) {\n\t        _classCallCheck(this, DialogOutput);\n\t\n\t        var _this5 = _possibleConstructorReturn(this, (DialogOutput.__proto__ || Object.getPrototypeOf(DialogOutput)).call(this, config.id));\n\t\n\t        _this5.type = EOutputType.DialogResponse;\n\t        _this5.text = config.text ? String(config.text) : null;\n\t        _this5.uri = config.uri ? String(config.uri) : null;\n\t        _this5.videoFile = config.video_file ? String(config.video_file) : null;\n\t        _this5.duration = config.duration ? +config.duration : 0;\n\t        _this5.character = config.character ? String(config.character) : null;\n\t        _this5.userData = config.user_data ? String(config.user_data) : null;\n\t        _this5.phonemes = [];\n\t        for (var index in config.phonemes) {\n\t            var p = config.phonemes[index];\n\t            var phoneme = new Phoneme(p);\n\t            _this5.phonemes.push(phoneme);\n\t        }\n\t        return _this5;\n\t    }\n\t\n\t    return DialogOutput;\n\t}(Output);\n\t\n\t/**\n\t * Subclass of Output that represents a behavior response\n\t * @extends Output\n\t * @property {EOutputType} type EOutputType.BehaviorResponse (read only)\n\t * @property {string} behavior The name of the behavior.\n\t * @property {Object} parameters An object with any parameters defined for the\n\t * behavior.\n\t */\n\t\n\t\n\tvar BehaviorOutput = function (_Output2) {\n\t    _inherits(BehaviorOutput, _Output2);\n\t\n\t    function BehaviorOutput(config) {\n\t        _classCallCheck(this, BehaviorOutput);\n\t\n\t        var _this6 = _possibleConstructorReturn(this, (BehaviorOutput.__proto__ || Object.getPrototypeOf(BehaviorOutput)).call(this, config.id));\n\t\n\t        _this6.type = EOutputType.BehaviorResponse;\n\t        _this6.behavior = config.behavior ? String(config.behavior) : null;\n\t        _this6.parameters = {};\n\t        for (var key in config.parameters) {\n\t            _this6.parameters[key] = config.parameters[key];\n\t        }\n\t        return _this6;\n\t    }\n\t\n\t    return BehaviorOutput;\n\t}(Output);\n\t\n\t/**\n\t * Describe the status and any errors from a Web API response\n\t * @property {number} code\n\t * @property {string} message\n\t * @property {boolean} success\n\t * */\n\t\n\t\n\tvar Status = function Status(status) {\n\t    _classCallCheck(this, Status);\n\t\n\t    this.code = +status.code;\n\t    this.message = status.message ? String(status.message) : null;\n\t    this.success = !!status.success;\n\t};\n\t\n\t/**\n\t * Describe a single response from the PullString Web API\n\t * @property {Status} status\n\t * @property {Output[]} outputs Dialog or behaviors returned from the Web API\n\t * @property {Entity[]} entities Counters, flags, etc for the converation\n\t * @property {Date} lastModified\n\t * @property {string} conversationId Identifies an ongoing conversation to the\n\t * Web API and can persist across sessions. It is required after a conversation\n\t * is started.\n\t * @property {string} participantId Identifies state to the Web API and can\n\t * persist across sessions.\n\t * @property {string} etag Unique identifier of a version of the content.\n\t * @property {number} timedResponseInterval Indicates that there may be another\n\t * response to process in the specified number of seconds. Set a timer and call\n\t * checkForTimedResponse() from a conversation to retrieve it.\n\t * @property {string} asrHypothesis The recognized speech, if audio has been\n\t * submitted.\n\t * @property {EOutputType} Response.EOutputType\n\t * @property {EEntityType} Response.EEntityType\n\t */\n\t\n\t\n\tvar Response = function Response(json) {\n\t    _classCallCheck(this, Response);\n\t\n\t    this.status = new Status(json.status);\n\t    this.outputs = [];\n\t\n\t    for (var index in json.outputs) {\n\t        var output = json.outputs[index];\n\t        if (output.type === EOutputType.DialogResponse) {\n\t            var dialog = new DialogOutput(output);\n\t            this.outputs.push(dialog);\n\t        } else if (output.type === EOutputType.BehaviorResponse) {\n\t            var behavior = new BehaviorOutput(output);\n\t            this.outputs.push(behavior);\n\t        }\n\t    }\n\t\n\t    this.entities = [];\n\t    var entities = json.entities;\n\t\n\t    for (var name in entities) {\n\t        if (!entities.hasOwnProperty(name)) continue;\n\t        var value = entities[name];\n\t        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\t\n\t        if (type === 'boolean') {\n\t            var flag = new Flag(name, value);\n\t            this.entities.push(flag);\n\t        } else if (type === 'number') {\n\t            var counter = new Counter(name, value);\n\t            this.entities.push(counter);\n\t        } else if (type === 'string') {\n\t            var label = new Label(name, value);\n\t            this.entities.push(label);\n\t        } else if (type === 'object' && Array.isArray(value)) {\n\t            var list = new List(name, value);\n\t            this.entities.push(list);\n\t        }\n\t    }\n\t\n\t    this.lastModified = json.last_modified ? new Date(json.last_modified) : null;\n\t    this.conversationId = json.conversation ? String(json.conversation) : null;\n\t    this.participantId = json.participant ? String(json.participant) : null;\n\t    this.etag = json.etag ? String(json.etag) : null;\n\t    this.timedResponseInterval = json.timed_response_interval ? +json.timed_response_interval : -1;\n\t    this.asrHypothesis = json.asr_hypothesis ? String(json.asr_hypothesis) : null;\n\t    if (json.timed_response_interruptable) {\n\t        this.timedResponseInterruptible = Boolean(json.timed_response_interruptable);\n\t    } else {\n\t        this.timedResponseInterruptible = false;\n\t    }\n\t};\n\t\n\tResponse.EEntityType = EEntityType;\n\tResponse.EOutputType = EOutputType;\n\t\n\tmodule.exports = {\n\t    Response: Response,\n\t    Status: Status,\n\t    DialogOutput: DialogOutput,\n\t    BehaviorOutput: BehaviorOutput,\n\t    Label: Label,\n\t    Counter: Counter,\n\t    Flag: Flag,\n\t    List: List,\n\t    Phoneme: Phoneme\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*\n\t * Make REST calls to PullString's Web API.\n\t *\n\t * Copyright (c) 2016 PullString, Inc.\n\t *\n\t * The following source code is licensed under the MIT license.\n\t * See the LICENSE file, or https://opensource.org/licenses/MIT.\n\t */\n\t\n\tvar RestClient = function () {\n\t    function RestClient(options) {\n\t        _classCallCheck(this, RestClient);\n\t\n\t        this.decode = options.decode || JSON.parse;\n\t        this.encode = options.encode || JSON.stringify;\n\t        this.baseUrl = options.baseUrl;\n\t        this.XMLHttpRequest = options.xhr || XMLHttpRequest;\n\t    }\n\t\n\t    _createClass(RestClient, [{\n\t        key: 'post',\n\t        value: function post(endpoint, params, headers, body, callback) {\n\t            var doEncode = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n\t\n\t            if (!this.baseUrl) return;\n\t            var url = this._url(endpoint, params);\n\t            if (doEncode && this.encode) {\n\t                body = this.encode(body);\n\t            }\n\t            this._sendRequest(url, 'POST', headers, callback, body);\n\t        }\n\t    }, {\n\t        key: '_url',\n\t        value: function _url(endpoint, params) {\n\t            var url = this.baseUrl;\n\t            if (!url.endsWith('/')) {\n\t                url = url + '/';\n\t            }\n\t\n\t            var query = [];\n\t            for (var p in params) {\n\t                if (params.hasOwnProperty(p)) {\n\t                    var key = encodeURIComponent(p);\n\t                    var val = encodeURIComponent(params[p]);\n\t                    var param = key + '=' + val;\n\t                    query.push(param);\n\t                }\n\t            };\n\t            return '' + url + endpoint + '?' + query.join('&');\n\t        }\n\t    }, {\n\t        key: '_sendRequest',\n\t        value: function _sendRequest(url, method, headers, callback) {\n\t            var _this = this;\n\t\n\t            var body = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\t\n\t            var xhr = new this.XMLHttpRequest();\n\t            xhr.open(method, url, true);\n\t\n\t            for (var h in headers) {\n\t                if (headers.hasOwnProperty(h)) {\n\t                    xhr.setRequestHeader(h, headers[h]);\n\t                }\n\t            }\n\t\n\t            xhr.onreadystatechange = function () {\n\t                if (xhr.readyState === 4) {\n\t                    var response = {};\n\t                    var status = {};\n\t                    status.code = xhr.status;\n\t                    status.success = xhr.status < 400;\n\t                    if (status.success) {\n\t                        response = xhr.responseText;\n\t                        if (_this.decode) {\n\t                            response = _this.decode(response);\n\t                        }\n\t                    } else {\n\t                        var error = _this.decode(xhr.responseText);\n\t                        if (error.error.message) {\n\t                            status.message = error.error.message;\n\t                        } else {\n\t                            status.message = 'Error processing server response';\n\t                        }\n\t                    }\n\t\n\t                    response.status = status;\n\t                    callback && callback(response);\n\t                }\n\t            };\n\t\n\t            xhr.send(body);\n\t        }\n\t    }]);\n\t\n\t    return RestClient;\n\t}();\n\t\n\tmodule.exports = { RestClient: RestClient };\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*\n\t * Encapsulate a request to the PullString Web API.\n\t *\n\t * Copyright (c) 2016 PullString, Inc.\n\t *\n\t * The following source code is licensed under the MIT license.\n\t * See the LICENSE file, or https://opensource.org/licenses/MIT.\n\t */\n\t\n\t/**\n\t * The asset build tyoe to request for Web API requests\n\t * @readonly\n\t * @enum {string}\n\t * @property {string} EBuildType.Sandbox\n\t * @property {string} EBuildType.Staging\n\t * @property {string} EBuildType.Production\n\t */\n\tvar EBuildType = {\n\t  Sandbox: 'sandbox',\n\t  Staging: 'staging',\n\t  Production: 'production'\n\t};\n\t\n\t/**\n\t * @readonly\n\t * @enum {Number}\n\t * @property {Number} EAudioFormat.RawPcm16k\n\t * @property {Number} EAudioFormat.Wav16k\n\t */\n\tvar EAudioFormat = {\n\t  RawPcm16k: 0,\n\t  Wav16k: 1\n\t};\n\t\n\t/**\n\t * Describe the parameters for a request to the PullString Web API.\n\t * @property {string} apiKey Your API key, required for all requests.\n\t * @property {string} participantId Identifies state to the Web API and can\n\t * persist across sessions.\n\t * @property {EBuildType} buildType defaults to EBuildType.Production.\n\t * @property {string} conversationId Identifies an ongoing conversation to the\n\t * Web API and can persist across sessions. It is required after a conversation\n\t * is started.\n\t * @property {string} language ASR language; defaults to 'en-US'.\n\t * @property {string} locale User locale; defaults to'en-US'.\n\t * @property {boolean} restartIfModified Restart this conversation if a newer\n\t * version of the project has been published. Default value is true.\n\t * @property {number} timeZoneOffset A value in seconds representing the offset\n\t * in UTC. For example, PST would be -28800.\n\t * @property {string} accountId\n\t */\n\t\n\tvar Request = function Request(config) {\n\t  _classCallCheck(this, Request);\n\t\n\t  this.apiKey = config.apiKey;\n\t  this.participantId = config.participant;\n\t  this.buildType = config.buildType || EBuildType.Production;\n\t  this.conversationId = config.conversationId;\n\t  this.language = config.language || 'en-US';\n\t  this.locale = config.locale;\n\t  this.accountId = config.accountId;\n\t  this.timeZoneOffset = config.timeZoneOffset || 0;\n\t  this.restartIfModified = config.restartIfModified || true;\n\t};\n\t\n\tRequest.EBuildType = EBuildType;\n\tRequest.EAudioFormat = EAudioFormat;\n\t\n\tmodule.exports = { Request: Request };\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\n\tontrol collection and processing of audio data for ASR.\n\tn\topyright (c) 2016 PullString, Inc.\n\tn\the following source code is licensed under the MIT license.\n\tee the LICENSE file, or https://opensource.org/licenses/MIT.\n\tn\t\n\tvar _SpeechWorker = __webpack_require__(6);\n\t\n\tvar _SpeechWorker2 = _interopRequireDefault(_SpeechWorker);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Speech = function () {\n\t    function Speech() {\n\t        _classCallCheck(this, Speech);\n\t\n\t        this._callback = null;\n\t        this._worker = null;\n\t    }\n\t\n\t    _createClass(Speech, [{\n\t        key: 'start',\n\t        value: function start() {\n\t            var _this = this;\n\t\n\t            this._worker = new Worker(this._getSpeechWorkerUrl());\n\t            this._worker.onmessage = function (message) {\n\t                _this._callback && _this._callback(message);\n\t            };\n\t        }\n\t    }, {\n\t        key: 'add',\n\t        value: function add(audio) {\n\t            var workerObj = {\n\t                command: 'listen',\n\t                buffer: audio\n\t            };\n\t            this._worker.postMessage(workerObj, [workerObj.buffer.buffer]);\n\t        }\n\t    }, {\n\t        key: 'flush',\n\t        value: function flush() {\n\t            this._worker.postMessage({\n\t                command: 'flush'\n\t            });\n\t        }\n\t    }, {\n\t        key: 'getBytes',\n\t        value: function getBytes(cb) {\n\t            if (!cb) {\n\t                throw new Error('Callback must be provide to process audio');\n\t            }\n\t\n\t            this._callback = function (message) {\n\t                cb && cb(message.data);\n\t            };\n\t            this._worker.postMessage({\n\t                command: 'getMono'\n\t            });\n\t        }\n\t    }, {\n\t        key: '_getSpeechWorkerUrl',\n\t        value: function _getSpeechWorkerUrl() {\n\t            var createObjURL = window.URL && URL.createObjectURL.bind(URL) || window.webkitURL && window.webkitURL.createObjectURL.bind(window.webkitURL) || window.createObjectURL;\n\t\n\t            if (!createObjURL) {\n\t                createObjURL = global.createObjectURL;\n\t            }\n\t\n\t            var funcStr = _SpeechWorker2.default.toString();\n\t            var bodyStart = funcStr.indexOf('{');\n\t            var bodyEnd = funcStr.lastIndexOf('}');\n\t\n\t            if (bodyStart > 0 && bodyEnd > bodyStart) {\n\t                var speechWorkerFunc = funcStr.substring(bodyStart + 1, bodyEnd);\n\t                return createObjURL(new Blob([speechWorkerFunc]), { type: 'text/javascript' });\n\t            }\n\t\n\t            return null;\n\t        }\n\t    }]);\n\t\n\t    return Speech;\n\t}();\n\t\n\tmodule.exports = { Speech: Speech };\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\t/*\n\t * Aggregate audio data and prepare for sending to the PullString Web API.\n\t *\n\t * Copyright (c) 2016 PullString, Inc.\n\t *\n\t * The following source code is licensed under the MIT license.\n\t * See the LICENSE file, or https://opensource.org/licenses/MIT.\n\t */\n\t\n\tfunction SpeechWorker() {\n\t    var recLength = 0;\n\t    var recBuffers = [];\n\t    var messages = {};\n\t    var _this = this;\n\t\n\t    this.onmessage = function (message) {\n\t        var command = message.data.command;\n\t        messages[command] && messages[command](message.data);\n\t    };\n\t\n\t    function listen(data) {\n\t        recBuffers.push(data.buffer);\n\t        recLength += data.buffer.length;\n\t    }\n\t\n\t    function flush(data) {\n\t        recLength = 0;\n\t        recBuffers = [];\n\t    }\n\t\n\t    function concatenate(buffers, len) {\n\t        var merged = new Float32Array(len);\n\t        var offset = 0;\n\t        for (var i = 0; i < buffers.length; i++) {\n\t            merged.set(buffers[i], offset);\n\t            offset += buffers[i].length;\n\t        }\n\t        return merged;\n\t    }\n\t\n\t    function getMono(data) {\n\t        var monoBuffer = concatenate(recBuffers, recLength);\n\t        var bufferLength = monoBuffer.length * 2;\n\t        var arrayBuffer = new ArrayBuffer(bufferLength);\n\t        var dataView = new DataView(arrayBuffer);\n\t\n\t        // convert raw samples to bytes\n\t        var byteOffset = 0;\n\t        for (var i = 0; i < monoBuffer.length; i++) {\n\t            var inSample = monoBuffer[i];\n\t            var sample = Math.max(-1, Math.min(1, inSample));\n\t            var intSample = sample < 0 ? sample * 0x8000 : sample * 0x7FFF;\n\t            dataView.setUint16(byteOffset, intSample, true);\n\t            byteOffset += 2;\n\t        }\n\t\n\t        _this.postMessage(dataView);\n\t    }\n\t\n\t    messages = {\n\t        listen: listen,\n\t        flush: flush,\n\t        getMono: getMono\n\t    };\n\t}\n\t\n\tmodule.exports = SpeechWorker;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*\n\t * Encapsulates version information for PullString's' Web API.\n\t *\n\t * Copyright (c) 2016 PullString, Inc.\n\t *\n\t * The following source code is licensed under the MIT license.\n\t * See the LICENSE file, or https://opensource.org/licenses/MIT.\n\t */\n\t\n\t/**\n\t * Define features to check if they are supported.\n\t * @readonly\n\t * @property {int} EFeatures.StreamingAsr\n\t */\n\tvar EFeatures = {\n\t  StreamingAsr: 0\n\t};\n\t\n\t/**\n\t * Encapsulates version information for PullString's' Web API.\n\t */\n\t\n\tvar VersionInfo = function () {\n\t  function VersionInfo() {\n\t    _classCallCheck(this, VersionInfo);\n\t  }\n\t\n\t  _createClass(VersionInfo, null, [{\n\t    key: 'hasFeature',\n\t\n\t    /**\n\t     * Check if the endpoint currently supports a feature.\n\t     * @param {EFeatures} feature The feature to check.\n\t     */\n\t    value: function hasFeature(feature) {\n\t      switch (feature) {\n\t        case EFeatures.StreamingAsr:\n\t        default:\n\t          return false;\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return VersionInfo;\n\t}();\n\t\n\t/**\n\t * The public-facing endpoint of the PullString Web API.\n\t */\n\t\n\t\n\tObject.defineProperty(VersionInfo, 'ApiBaseUrl', {\n\t  value: 'https://conversation.pullstring.ai/v1/',\n\t  writable: false,\n\t  enumerable: true,\n\t  configurable: false\n\t});\n\t\n\tVersionInfo.EFeatures = EFeatures;\n\t\n\tmodule.exports = { VersionInfo: VersionInfo };\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// pullstring.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a10a0aeac75a8bfe10eb","/*\n * The PullString Javascript SDK\n *\n * Copyright (c) 2016 PullString, Inc.\n *\n * The following source code is licensed under the MIT license.\n * See the LICENSE file, or https://opensource.org/licenses/MIT.\n */\nimport {Conversation} from './Conversation.js';\nimport {Response, Status, DialogOutput, BehaviorOutput, Label, Counter, Flag, List, Phoneme} from './Response.js';\nimport {Request} from './Request.js';\nimport {VersionInfo} from './VersionInfo.js';\n\n/**\n * Main PullString SDK module.\n * @module pullstring\n * @property {Conversation} Conversation\n * @property {Response} Response\n * @property {Status} Status\n * @property {DialogOutput} DialogOutput\n * @property {BehaviorOutput} BehaviorOutput\n * @property {Label} Label\n * @property {Counter} Counter\n * @property {Flag} Flag\n * @property {List} List\n * @property {Phoneme} Phoneme\n * @property {Request} Request\n * @property {VersionInfo} VersionInfo\n */\n\nmodule.exports = {\n    Conversation: Conversation,\n    Response: Response,\n    Status: Status,\n    DialogOutput: DialogOutput,\n    BehaviorOutput: BehaviorOutput,\n    Label: Label,\n    Counter: Counter,\n    Flag: Flag,\n    List: List,\n    Phoneme: Phoneme,\n    Request: Request,\n    VersionInfo: VersionInfo,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/Pullstring.js","/*\n * Encapsulate a conversation thread for PullString's Web API.\n *\n * Copyright (c) 2016 PullString, Inc.\n *\n * The following source code is licensed under the MIT license.\n * See the LICENSE file, or https://opensource.org/licenses/MIT.\n */\n\nimport {Response, Status} from './Response.js';\nimport {RestClient} from './RestClient.js';\nimport {Request} from './Request.js';\nimport {Speech} from './Speech.js';\nimport {VersionInfo} from './VersionInfo.js';\n\n/**\n * The Conversation class can be used to interface with the PullString API.\n *\n * To begin a conversation, call the start() method, providing a PullString\n * project ID and a Request object specifying you API key.\n *\n * The Web API returns a Response object that can contain zero or more outputs,\n * such as lines of dialog or behaviors. This Response object is passed to the\n * onResponse callback as its sole parameter.\n *\n * @property {string} ApiBaseUrl\n * @property {Number} AsrSampleRate\n * @property {Number} AsrChannels\n */\nclass Conversation {\n    /**\n     * Creates a Conversation\n     * @param {XMLHttpReqeuest} [nodeXhr = null] If in Node.js, pass in the\n     * XMLHttpReqeuest module class.\n     */\n    constructor(nodeXhr = null) {\n        /**\n         * @callback Conversation~onResponse\n         */\n        this.onResponse = null;\n        let config = { baseUrl: VersionInfo.ApiBaseUrl };\n        if (nodeXhr) config.xhr = nodeXhr;\n        this._client = new RestClient(config);\n        this._speech = new Speech();\n        this._request = null;\n    }\n\n    /**\n     * Start a new conversation with the Web API and receive a reponse via the\n     * onResponse callback.\n     * @param {string} projectName The PullString project ID.\n     * @param {Request} request A Request object with a valid apiKey value\n     * specified.\n     * @param {string} request.apiKey Your API key.\n     */\n    start(projectName, request) {\n        if (!this._ensureRequest(request)) return;\n\n        let json = {\n            project: projectName,\n        };\n\n        if (request.hasOwnProperty('timeZoneOffset')) {\n            json.time_zone_offset = request.timeZoneOffset; // eslint-disable-line camelcase\n        }\n\n        this._post(json, request);\n    }\n\n    /**\n     * Send user input text to the Web API and receive a response via the\n     * onResponse callback.\n     * @param {string} text User input text.\n     * @param {Request} request A request object with at least apiKey and\n     * conversationId set.\n     * @param {string} request.apiKey Your API key.\n     * @param {string} request.conversationId The conversation ID received when\n     * the conversation was started.\n     */\n    sendText(text, request) {\n        let json = {\n            text: text,\n        };\n\n        this._post(json, request);\n    }\n\n    /**\n     * Send an activity name or ID to the Web API and receive a response via\n     * the onResponse callback.\n     * @param {string} activity The activity name or ID.\n     * @param {Request} request A request object with at least apiKey and\n     * conversationId set.\n     */\n    sendActivity(activity, request) {\n        let json = {\n            activity: activity,\n        };\n\n        this._post(json, request);\n    }\n\n    /**\n     * Send an event to the Web API and receive a response via the onResponse\n     * callback.\n     * @param {string} event The event name.\n     * @param {Object} parameters Any accompanying parameters.\n     * @param {Request} request A request object with at least apiKey and\n     * conversationId set.\n     */\n    sendEvent(event, parameters, request) {\n        let eventObj = {\n            name: event,\n            parameters: parameters || {},\n        };\n\n        let json = {\n            event: eventObj,\n        };\n\n        this._post(json, request);\n    }\n\n    /**\n     * Initiate a progressive (chunked) streaming of audio data, where supported.\n     *\n     * Note, chunked streaming is not currently implemented, so this will batch\n     * up all audio and send it all at once when end_audio() is called.\n     * @param {Request} request A request object with at least apiKey and\n     * conversationId set.\n     */\n    startAudio(request) {\n        if (this._ensureRequest(request)) this._speech.start();\n    }\n\n    /**\n     * Add a chunk of audio. You must call start_audio() first. The format of\n     * the audio must be mono LinearPCM audio data at a sample rate of 16000\n     * samples per second.\n     * @param {Float32Array} buffer The audio data, i.e. from\n     * `audioBuffer.getChannelData(0)`.\n     */\n    addAudio(buffer) {\n        this._speech.add(buffer);\n    }\n\n    /**\n     * Signal that all audio has been provided via add_audio() calls. This will\n     * complete the audio request and return the Web API response.\n     */\n    stopAudio() {\n        let _this = this;\n        this._speech.getBytes((data) => {\n            _this._speech.flush();\n            _this._postAudio(\n                data,\n                _this._request\n            );\n        });\n    }\n\n    /**\n     * Send an entire audio sample of the user speaking to the Web API. Audio\n     * must be raw, mono 16-bit linear PCM at a sample rate of 16000\n     * samples per second.\n     * @param {DataView} audio Mono 16-bit linear PCM audio data at 16k Hz.\n     * @param {Request.EAudioFormat} format Specify WAV or raw PCM format. Note\n     * that only 16-bit linear PCM WAV format at 16k is currently supported.\n     * @param {Request} request A request object with at least apiKey and\n     * conversationId set.\n     * */\n    sendAudio(audio, format, request) {\n        if (Object.prototype.toString.call(audio) !== '[object DataView]') {\n            this._returnError('Audio sent to sendAudio is not a DataView');\n            return;\n        }\n\n        if (format !== Request.EAudioFormat.Wav16k) {\n            this._returnError('Unsupported format sent to sendAudio.');\n            return;\n        }\n\n        let audioData = this._getWavData(audio);\n\n        if (audioData.error) {\n            this._returnError(audioData.error);\n            return;\n        }\n\n        this._postAudio(audioData, request);\n    }\n\n    /**\n     * Jump the conversation directly to a response.\n     * @param {string} responseId The UUID of the response to jump to.\n     * @param {Request} request A request object with at least apiKey and\n     * conversationId set.\n     */\n    goTo(responseId, request) {\n        let json = {\n            goto: responseId,\n        };\n\n        this._post(json, request);\n    }\n\n    /**\n     * Call the Web API to see if there is a time-based response to process. You\n     * only need to call this if the previous response returned a value for the\n     * timedResponseInterval >= 0.  In this case, set a timer for that value (in\n     * seconds) and then call this method. If there is no time-based response,\n     * the onResponse callback will be passed an empty Response object.\n     * @param {Request} request A request object with at least apiKey and\n     * conversationId set.\n     */\n    checkForTimedResponse(request) {\n        let json = {/* empty json */};\n        this._post(json, request);\n    }\n\n    /**\n     * Request the values of the specified entities (i.e.: labels, counters, flags,\n     * and lists) from the Web API.\n     * @param {string[]} entities An array of entity names.\n     * @param {Request} request A request object with at least apiKey and\n     * conversationId set.\n     */\n    getEntities(entities, request) {\n        if (!Array.isArray(entities)) {\n            this._returnError('entities sent to getEntities must be an array');\n            return;\n        }\n\n        let json = {\n            get_entities: entities, // eslint-disable-line camelcase\n        };\n\n        this._post(json, request);\n    }\n\n    /**\n     * Change the value of the specified entities (i.e.: labels, counters, flags,\n     * and lists) via the Web API.\n     * @param {Object[]} entities An array specifying the entities to set and\n     * their new values.\n     * @param {string} entities[].name The entity's name.\n     * @param {*} entities[].value The entity's name, which can be any type.\n     * @param {Request} request A request object with at least apiKey and\n     * conversationId set.\n     */\n    setEntities(entities, request) {\n        if (!Array.isArray(entities)) {\n            this._returnError('entities sent to setEntities must be an array');\n            return;\n        }\n\n        let entObj = {};\n        for (let i in entities) {\n            let entity = entities[i];\n            entObj[entity.name] = entity.value;\n        }\n\n        let json = {\n            set_entities: entObj, // eslint-disable-line camelcase\n        };\n\n        this._post(json, request);\n    }\n\n    /**\n     * Retrieve the current conversation ID. Conversation IDs can persist across\n     * sessions, if desired.\n     * @return {string} The concurrent conversation ID.\n     */\n    getConversationId() {\n        if (this._request && this._request.conversationId) {\n            return this._request.conversationId;\n        }\n\n        return null;\n    }\n\n    /**\n     * Get the current participant ID, which identifies the current state for\n     * clients. This can persist across sessions, if desired.\n     * @return {string} The current participant ID.\n     */\n    getParticipantId() {\n        if (this._request && this._request.participantId) {\n            return this._request.participantId;\n        }\n\n        return null;\n    }\n\n    _ensureRequest(request) {\n        if (request) {\n            this._request = request;\n        }\n\n        if (!this._request || !this._request.apiKey) {\n            this._returnError('Valid request object missing');\n            return false;\n        }\n\n        return true;\n    }\n\n    _post(body, request, contentType = 'application/json', doEncode = true) {\n        if (!this._ensureRequest(request)) return;\n        let endpoint = this._endpointForRequest(this._request);\n        let headers = this._headersForRequest(this._request, contentType);\n        let params = this._paramsForRequest(this._request);\n\n        // If doEncode is true, our body is json. So add more params from request.\n        if (doEncode) {\n            body = this._bodyForRequest(this._request, body);\n        }\n\n        this._client.post(\n            endpoint,\n            params,\n            headers,\n            body,\n            (response) => this._responseHandler(response),\n            doEncode\n        );\n    }\n\n    _postAudio(audio, request) {\n        if (!audio) {\n            this._returnError('Unable to extract audio data');\n            return;\n        }\n\n        this._post(audio, this._request, 'audio/l16; rate=16000', false);\n    }\n\n    _headersForRequest(request, contentType) {\n        let headers = {\n            Authorization: `Bearer ${request.apiKey}`,\n            Accept: 'application/json',\n        };\n\n        headers['Content-Type'] = contentType;\n\n        return headers;\n    }\n\n    _paramsForRequest(request) {\n        let params = {\n            asr_language: request.language, // eslint-disable-line camelcase\n        };\n\n        if (request.locale) params.locale = request.locale;\n        if (request.acountId) params.account = request.accountId;\n\n        return params;\n    }\n\n    _bodyForRequest(request, params = null) {\n        let body = {};\n\n        // only add build_type and restart_if_modified if not the default values\n        if (request.buildType !== Request.EBuildType.Production) {\n            body.build_type = request.buildType; // eslint-disable-line camelcase\n        }\n\n        if (request.restartIfModified === false) {\n            body.restart_if_modified = false; // eslint-disable-line camelcase\n        }\n\n        if (request.participantId) body.participant = request.participantId;\n\n        if (params) {\n            for (let p in params) {\n                body[p] = params[p];\n            }\n        }\n\n        return body;\n    }\n\n    _endpointForRequest(request) {\n        let endpoint = 'conversation';\n\n        if (request.conversationId) {\n            endpoint = `${endpoint}/${request.conversationId}`;\n        }\n\n        return endpoint;\n    }\n\n    _responseHandler(json) {\n        let response = new Response(json);\n        if (response.status.success && this._request) {\n            this._request.conversationId = response.conversationId;\n            this._request.participantId = response.participantId;\n        }\n        this.onResponse && this.onResponse(response);\n    }\n\n    _getWavData(dataView) {\n        let riff = this._dataViewGetString(dataView, 0, 4);\n\n        if (riff !== 'RIFF') {\n            return { error: 'Data is not a WAV file' };\n        }\n\n        let channels = dataView.getUint16(22, true);\n        let rate = dataView.getUint32(24, true);\n        let bitsPerSample = dataView.getUint16(34, true);\n\n        if (channels !== 1 || rate !== 16000 || bitsPerSample !== 16) {\n            return { error: 'WAV data is not mono 16-bit data at 16k sample rate' };\n        }\n\n        let dataOffset = 12;\n        let chunkSize = dataView.getUint32(16, true);\n        let fileSize = dataView.getUint32(4, true);\n\n        while (this._dataViewGetString(dataView, dataOffset, 4) !== 'data') {\n            if (dataOffset > fileSize) {\n                return { error: 'Cannot find data segment in WAV file' };\n            }\n\n            dataOffset += chunkSize + 8;\n            chunkSize = dataView.getUint32(dataOffset + 4, true);\n        }\n\n        let dataStart = dataOffset + 8;\n        let buffer = dataView.buffer.slice(dataStart);\n        return new Uint8Array(buffer);\n    }\n\n    _dataViewGetString(dataView, offset, length) {\n        let retVal = '';\n        for (let i = 0; i < length; i++) {\n            let charCode = dataView.getUint8(i + offset);\n            retVal = retVal + String.fromCharCode(charCode);\n        }\n\n        return retVal;\n    }\n\n    _returnError(message) {\n        let error = new Status({\n            success: false,\n            message: message,\n            code: 500,\n        });\n\n        this.onResponse && this.onResponse({\n            status: error,\n        });\n    }\n}\n\n// static constants\nObject.defineProperty(Conversation, 'AsrSampleRate', {\n    value: 16000,\n    writable: false,\n    enumerable: true,\n    configurable: false,\n});\n\nObject.defineProperty(Conversation, 'AsrChannels', {\n    value: 1,\n    writable: false,\n    enumerable: true,\n    configurable: false,\n});\n\nmodule.exports = { Conversation };\n\n\n\n// WEBPACK FOOTER //\n// ./src/Conversation.js","/*\n * Encapsulate a response from the PullString Web API.\n *\n * Copyright (c) 2016 PullString, Inc.\n *\n * The following source code is licensed under the MIT license.\n * See the LICENSE file, or https://opensource.org/licenses/MIT.\n */\n\n/**\n * Define the set of outputs that can be returned in a response.\n * @readonly\n * @property {string} EOutputType.DialogResponse\n * @property {string} EOutputType.BehaviorResponse\n */\nconst EOutputType = {\n    DialogResponse: 'dialog',\n    BehaviorResponse: 'behavior',\n};\n\n/**\n * Define the list of entity types\n * @readonly\n * @property {string} EEntityType.Label\n * @property {string} EEntityType.Counter\n * @property {string} EEntityType.Flag\n * @property {string} EEntityType.List\n */\nconst EEntityType = {\n    Label: 'label',\n    Counter: 'counter',\n    Flag: 'flag',\n    List: 'list'\n};\n\n/**\n * Describe a single phoneme for an audio response, e.g., to drive automatic\n * lip sync.\n * @property {string} name\n * @property {number} secondsSinceStart\n */\nclass Phoneme {\n    constructor(config) {\n        this.name = config.name ? String(config.name) : null;\n        this.secondsSinceStart = +config.seconds_since_start;\n    }\n}\n\n/**\n * Base class to describe a single entity, such as a label, counter, flag, or list\n * @property {string} name\n */\nclass Entity {\n    constructor(name) {\n        this.name = name ? String(name) : null;\n    }\n}\n\n/**\n * Subclass of Entity to describe a single Label\n * @extends Entity\n * @property {EEntityType} type EEntityType.Label (read only)\n * @property {string} value\n */\nclass Label extends Entity {\n    constructor(name, value) {\n        super(name);\n        this.type = EEntityType.Label;\n        this.value = value ? String(value) : null;\n    }\n}\n\n/**\n * Subclass of Entity to describe a single Counter\n * @extends Entity\n * @property {EEntityType} type EEntityType.Counter (read only)\n * @property {number} value\n */\nclass Counter extends Entity {\n    constructor(name, value) {\n        super(name);\n        this.type = EEntityType.Counter;\n        this.value = +value;\n    }\n}\n\n/**\n * Subclass of Entity to describe a single Flag\n * @extends Entity\n * @property {EEntityType} type EEntityType.Flag (read only)\n * @property {boolean} value\n */\nclass Flag extends Entity {\n    constructor(name, value) {\n        super(name);\n        this.type = EEntityType.Flag;\n        this.value = !!value;\n    }\n}\n\n/**\n * Subclass of Entity to describe a single List\n * @extends Entity\n * @property {EEntityType} type EEntityType.List (read only)\n * @property {Array} value\n */\nclass List extends Entity {\n    constructor(name, value) {\n        super(name);\n        this.type = EEntityType.List;\n        this.value = Array.isArray(value) ? value.slice() : [];\n    }\n}\n\n/**\n * Base class for outputs that are of type dialog or behavior\n * @property {string} guid\n */\nclass Output {\n    constructor(guid) {\n        this.guid = String(guid);\n    }\n}\n\n/**\n * Subclass of Output that represents a dialog response\n * @extends Output\n * @property {EOutputType} type EOutputType.DialogResponse (read only)\n * @property {string} text A character's text response.\n * @property {string} uri Location of recorded audio, if available.\n * @property {string} videoFile Location of recorded video, if available.\n * @property {number} duration Duration of spoken line in seconds.\n * @property {string} character The speaking character.\n * @property {string} userData Optional arbitrary string data that was associated\n * with the dialog line within PullString Author. This can be used to pass custom\n * per-line information, such as an animation clip to play.\n * @property {Phoneme[]} phonemes Array of phonemes for driving automatic lip sync.\n */\nclass DialogOutput extends Output {\n    constructor(config) {\n        super(config.id);\n        this.type = EOutputType.DialogResponse;\n        this.text = config.text ? String(config.text) : null;\n        this.uri = config.uri ? String(config.uri) : null;\n        this.videoFile = config.video_file ? String(config.video_file) : null;\n        this.duration = config.duration ? +config.duration : 0;\n        this.character = config.character ? String(config.character) : null;\n        this.userData = config.user_data ? String(config.user_data) : null;\n        this.phonemes = [];\n        for (let index in config.phonemes) {\n            let p = config.phonemes[index];\n            let phoneme = new Phoneme(p);\n            this.phonemes.push(phoneme);\n        }\n    }\n}\n\n/**\n * Subclass of Output that represents a behavior response\n * @extends Output\n * @property {EOutputType} type EOutputType.BehaviorResponse (read only)\n * @property {string} behavior The name of the behavior.\n * @property {Object} parameters An object with any parameters defined for the\n * behavior.\n */\nclass BehaviorOutput extends Output {\n    constructor(config) {\n        super(config.id);\n        this.type = EOutputType.BehaviorResponse;\n        this.behavior = config.behavior ? String(config.behavior) : null;\n        this.parameters = {};\n        for (let key in config.parameters) {\n            this.parameters[key] = config.parameters[key];\n        }\n    }\n}\n\n/**\n * Describe the status and any errors from a Web API response\n * @property {number} code\n * @property {string} message\n * @property {boolean} success\n * */\nclass Status {\n    constructor(status) {\n        this.code = +status.code;\n        this.message = status.message ? String(status.message) : null;\n        this.success = !!status.success;\n    }\n}\n\n/**\n * Describe a single response from the PullString Web API\n * @property {Status} status\n * @property {Output[]} outputs Dialog or behaviors returned from the Web API\n * @property {Entity[]} entities Counters, flags, etc for the converation\n * @property {Date} lastModified\n * @property {string} conversationId Identifies an ongoing conversation to the\n * Web API and can persist across sessions. It is required after a conversation\n * is started.\n * @property {string} participantId Identifies state to the Web API and can\n * persist across sessions.\n * @property {string} etag Unique identifier of a version of the content.\n * @property {number} timedResponseInterval Indicates that there may be another\n * response to process in the specified number of seconds. Set a timer and call\n * checkForTimedResponse() from a conversation to retrieve it.\n * @property {string} asrHypothesis The recognized speech, if audio has been\n * submitted.\n * @property {EOutputType} Response.EOutputType\n * @property {EEntityType} Response.EEntityType\n */\nclass Response {\n    constructor(json) {\n        this.status = new Status(json.status);\n        this.outputs = [];\n\n        for (let index in json.outputs) {\n            let output = json.outputs[index];\n            if (output.type === EOutputType.DialogResponse) {\n                let dialog = new DialogOutput(output);\n                this.outputs.push(dialog);\n            } else if (output.type === EOutputType.BehaviorResponse) {\n                let behavior = new BehaviorOutput(output);\n                this.outputs.push(behavior);\n            }\n\n        }\n\n        this.entities = [];\n        let entities = json.entities;\n\n        for (let name in entities) {\n            if (!entities.hasOwnProperty(name)) continue;\n            let value = entities[name];\n            let type = typeof value;\n\n            if (type === 'boolean') {\n                let flag = new Flag(name, value);\n                this.entities.push(flag);\n            } else if (type === 'number') {\n                let counter = new Counter(name, value);\n                this.entities.push(counter);\n            } else if (type === 'string') {\n                let label = new Label(name, value);\n                this.entities.push(label);\n            } else if (type === 'object' && Array.isArray(value)) {\n                let list = new List(name, value);\n                this.entities.push(list);\n            }\n        }\n\n        this.lastModified = json.last_modified ? new Date(json.last_modified) : null;\n        this.conversationId = json.conversation ? String(json.conversation) : null;\n        this.participantId = json.participant ? String(json.participant) : null;\n        this.etag = json.etag ? String(json.etag) : null;\n        this.timedResponseInterval = json.timed_response_interval ? +json.timed_response_interval : -1;\n        this.asrHypothesis = json.asr_hypothesis ? String(json.asr_hypothesis) : null;\n        if (json.timed_response_interruptable) {\n            this.timedResponseInterruptible = Boolean(json.timed_response_interruptable);\n        } else {\n            this.timedResponseInterruptible = false;\n        }\n    }\n}\n\nResponse.EEntityType = EEntityType;\nResponse.EOutputType = EOutputType;\n\nmodule.exports = {\n    Response: Response,\n    Status: Status,\n    DialogOutput: DialogOutput,\n    BehaviorOutput: BehaviorOutput,\n    Label: Label,\n    Counter: Counter,\n    Flag: Flag,\n    List: List,\n    Phoneme: Phoneme,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/Response.js","/*\n * Make REST calls to PullString's Web API.\n *\n * Copyright (c) 2016 PullString, Inc.\n *\n * The following source code is licensed under the MIT license.\n * See the LICENSE file, or https://opensource.org/licenses/MIT.\n */\n\nclass RestClient {\n    constructor(options) {\n        this.decode = options.decode || JSON.parse;\n        this.encode = options.encode || JSON.stringify;\n        this.baseUrl = options.baseUrl;\n        this.XMLHttpRequest = options.xhr || XMLHttpRequest;\n    }\n\n    post(endpoint, params, headers, body, callback, doEncode = true) {\n        if (!this.baseUrl) return;\n        let url = this._url(endpoint, params);\n        if (doEncode && this.encode) {\n            body = this.encode(body);\n        }\n        this._sendRequest(url, 'POST', headers, callback, body);\n    }\n\n    _url(endpoint, params) {\n        let url = this.baseUrl;\n        if (!url.endsWith('/')) {\n            url = `${url}/`;\n        }\n\n        let query = [];\n        for (let p in params) {\n            if (params.hasOwnProperty(p)) {\n                let key = encodeURIComponent(p);\n                let val = encodeURIComponent(params[p]);\n                let param = `${key}=${val}`;\n                query.push(param);\n            }\n        };\n        return `${url}${endpoint}?${query.join('&')}`;\n    }\n\n    _sendRequest(url, method, headers, callback, body = null) {\n        let xhr = new this.XMLHttpRequest();\n        xhr.open(method, url, true);\n\n        for (let h in headers) {\n            if (headers.hasOwnProperty(h)) {\n                xhr.setRequestHeader(h, headers[h]);\n            }\n        }\n\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === 4) {\n                let response = {};\n                let status = {};\n                status.code = xhr.status;\n                status.success = xhr.status < 400;\n                if (status.success) {\n                    response = xhr.responseText;\n                    if (this.decode) {\n                        response = this.decode(response);\n                    }\n                } else {\n                    let error = this.decode(xhr.responseText);\n                    if (error.error.message) {\n                        status.message = error.error.message;\n                    } else {\n                        status.message = 'Error processing server response';\n                    }\n                }\n\n                response.status = status;\n                callback && callback(response);\n            }\n        };\n\n        xhr.send(body);\n    }\n}\n\nmodule.exports = { RestClient };\n\n\n\n// WEBPACK FOOTER //\n// ./src/RestClient.js","/*\n * Encapsulate a request to the PullString Web API.\n *\n * Copyright (c) 2016 PullString, Inc.\n *\n * The following source code is licensed under the MIT license.\n * See the LICENSE file, or https://opensource.org/licenses/MIT.\n */\n\n/**\n * The asset build tyoe to request for Web API requests\n * @readonly\n * @enum {string}\n * @property {string} EBuildType.Sandbox\n * @property {string} EBuildType.Staging\n * @property {string} EBuildType.Production\n */\nconst EBuildType = {\n    Sandbox: 'sandbox',\n    Staging: 'staging',\n    Production: 'production',\n};\n\n/**\n * @readonly\n * @enum {Number}\n * @property {Number} EAudioFormat.RawPcm16k\n * @property {Number} EAudioFormat.Wav16k\n */\nconst EAudioFormat = {\n    RawPcm16k: 0,\n    Wav16k: 1,\n};\n\n/**\n * Describe the parameters for a request to the PullString Web API.\n * @property {string} apiKey Your API key, required for all requests.\n * @property {string} participantId Identifies state to the Web API and can\n * persist across sessions.\n * @property {EBuildType} buildType defaults to EBuildType.Production.\n * @property {string} conversationId Identifies an ongoing conversation to the\n * Web API and can persist across sessions. It is required after a conversation\n * is started.\n * @property {string} language ASR language; defaults to 'en-US'.\n * @property {string} locale User locale; defaults to'en-US'.\n * @property {boolean} restartIfModified Restart this conversation if a newer\n * version of the project has been published. Default value is true.\n * @property {number} timeZoneOffset A value in seconds representing the offset\n * in UTC. For example, PST would be -28800.\n * @property {string} accountId\n */\nclass Request {\n    constructor(config) {\n        this.apiKey = config.apiKey;\n        this.participantId = config.participant;\n        this.buildType = config.buildType || EBuildType.Production;\n        this.conversationId = config.conversationId;\n        this.language = config.language || 'en-US';\n        this.locale = config.locale;\n        this.accountId = config.accountId;\n        this.timeZoneOffset = config.timeZoneOffset || 0;\n        this.restartIfModified = config.restartIfModified || true;\n    }\n}\n\nRequest.EBuildType = EBuildType;\nRequest.EAudioFormat = EAudioFormat;\n\nmodule.exports = { Request };\n\n\n\n// WEBPACK FOOTER //\n// ./src/Request.js","/*\n * Control collection and processing of audio data for ASR.\n *\n * Copyright (c) 2016 PullString, Inc.\n *\n * The following source code is licensed under the MIT license.\n * See the LICENSE file, or https://opensource.org/licenses/MIT.\n */\n\nimport SpeechWorker from './SpeechWorker.js';\n\nclass Speech {\n    constructor() {\n        this._callback = null;\n        this._worker = null;\n    }\n\n    start() {\n        this._worker = new Worker(this._getSpeechWorkerUrl());\n        this._worker.onmessage = (message) => {\n            this._callback && this._callback(message);\n        };\n    }\n\n    add(audio) {\n        let workerObj = {\n            command: 'listen',\n            buffer: audio,\n        };\n        this._worker.postMessage(workerObj, [workerObj.buffer.buffer]);\n    }\n\n    flush() {\n        this._worker.postMessage({\n            command: 'flush',\n        });\n    }\n\n    getBytes(cb) {\n        if (!cb) {\n            throw new Error('Callback must be provide to process audio');\n        }\n\n        this._callback = (message) => {\n            cb && cb(message.data);\n        };\n        this._worker.postMessage({\n            command: 'getMono',\n        });\n    }\n\n    _getSpeechWorkerUrl() {\n        let createObjURL = (window.URL && URL.createObjectURL.bind(URL)) ||\n            (window.webkitURL && window.webkitURL.createObjectURL.bind(window.webkitURL)) ||\n            window.createObjectURL;\n\n        if (!createObjURL) {\n            createObjURL = global.createObjectURL;\n        }\n\n        let funcStr = SpeechWorker.toString();\n        let bodyStart = funcStr.indexOf('{');\n        let bodyEnd = funcStr.lastIndexOf('}');\n\n        if (bodyStart > 0 && bodyEnd > bodyStart) {\n            let speechWorkerFunc = funcStr.substring(bodyStart + 1, bodyEnd);\n            return createObjURL(new Blob([speechWorkerFunc]), {type: 'text/javascript'});\n        }\n\n        return null;\n    }\n}\n\nmodule.exports = { Speech: Speech };\n\n\n\n// WEBPACK FOOTER //\n// ./src/Speech.js","/*\n * Aggregate audio data and prepare for sending to the PullString Web API.\n *\n * Copyright (c) 2016 PullString, Inc.\n *\n * The following source code is licensed under the MIT license.\n * See the LICENSE file, or https://opensource.org/licenses/MIT.\n */\n\nfunction SpeechWorker() {\n    let recLength = 0;\n    let recBuffers = [];\n    let messages = {};\n    let _this = this;\n\n    this.onmessage = (message) => {\n        let command = message.data.command;\n        messages[command] && messages[command](message.data);\n    };\n\n    function listen(data) {\n        recBuffers.push(data.buffer);\n        recLength += data.buffer.length;\n    }\n\n    function flush(data) {\n        recLength = 0;\n        recBuffers = [];\n    }\n\n    function concatenate(buffers, len) {\n        let merged = new Float32Array(len);\n        let offset = 0;\n        for (let i = 0; i < buffers.length; i++) {\n            merged.set(buffers[i], offset);\n            offset += buffers[i].length;\n        }\n        return merged;\n    }\n\n    function getMono(data) {\n        let monoBuffer = concatenate(recBuffers, recLength);\n        let bufferLength = monoBuffer.length * 2;\n        let arrayBuffer = new ArrayBuffer(bufferLength);\n        let dataView = new DataView(arrayBuffer);\n\n        // convert raw samples to bytes\n        let byteOffset = 0;\n        for (let i = 0; i < monoBuffer.length; i++) {\n            let inSample = monoBuffer[i];\n            let sample = Math.max(-1, Math.min(1, inSample));\n            let intSample = sample < 0 ? sample * 0x8000 : sample * 0x7FFF;\n            dataView.setUint16(byteOffset, intSample, true);\n            byteOffset += 2;\n        }\n\n        _this.postMessage(dataView);\n    }\n\n    messages = {\n        listen: listen,\n        flush: flush,\n        getMono: getMono,\n    };\n}\n\nmodule.exports = SpeechWorker;\n\n\n\n// WEBPACK FOOTER //\n// ./src/SpeechWorker.js","/*\n * Encapsulates version information for PullString's' Web API.\n *\n * Copyright (c) 2016 PullString, Inc.\n *\n * The following source code is licensed under the MIT license.\n * See the LICENSE file, or https://opensource.org/licenses/MIT.\n */\n\n/**\n * Define features to check if they are supported.\n * @readonly\n * @property {int} EFeatures.StreamingAsr\n */\nconst EFeatures = {\n    StreamingAsr: 0,\n};\n\n/**\n * Encapsulates version information for PullString's' Web API.\n */\nclass VersionInfo {\n    /**\n     * Check if the endpoint currently supports a feature.\n     * @param {EFeatures} feature The feature to check.\n     */\n    static hasFeature(feature) {\n        switch (feature) {\n        case EFeatures.StreamingAsr:\n        default:\n            return false;\n        }\n    }\n}\n\n/**\n * The public-facing endpoint of the PullString Web API.\n */\nObject.defineProperty(VersionInfo, 'ApiBaseUrl', {\n    value: 'https://conversation.pullstring.ai/v1/',\n    writable: false,\n    enumerable: true,\n    configurable: false,\n});\n\nVersionInfo.EFeatures = EFeatures;\n\nmodule.exports = { VersionInfo };\n\n\n\n// WEBPACK FOOTER //\n// ./src/VersionInfo.js"],"sourceRoot":""}